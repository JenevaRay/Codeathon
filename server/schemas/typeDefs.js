"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.typeDefs = void 0;
var apollo_server_express_1 = require("apollo-server-express");
// TODO: Event is missing all DATE types (startTime, endTime, registrationCutoffDate, registrationPaymentRequiredDate).  Documentation succests a 'scalar Date' for custom defs, I'm inclined to just pass the Date as-is (string) and parse it user-side, due to built in timezone info.
var typeDefs = (0, apollo_server_express_1.gql)(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  type User {\n    _id: ID\n    schemaVersion: String\n    schemaDate: String\n    emailAddress: String\n    password: String\n    nameLast: String\n    nameFirst: String\n    nameMiddle: String\n    addressStreet: String\n    addressExtended: String\n    addressCity: String\n    addressState: String\n    addressPostalCode: String\n    addressCountry: String\n    phoneNumber: String\n    phoneType: String\n    registrations: [Registration]\n  }\n\n  type Address {\n    _id: ID\n    streetAddress: String\n    extendedAddress: String\n    country: String\n    state: String\n    county: String\n    city: String\n    postalCode: String\n    type: String\n    isUserPrimary: Boolean\n  }\n\n  type Phone {\n    _id: ID\n    number: String\n    type: String\n    isUserPrimary: Boolean\n  }\n\n  type Registration {\n    _id: ID\n    userId: User\n    eventId: Event\n    role: String\n    paid: Boolean\n  }\n\n  type Event {\n    _id: ID\n    name: String\n    dateStart: String\n    dateEnd: String\n    registrations: [Registration]\n    dateCutoff: String\n    feeRegistration: Int\n    feeVenue: Int\n    venues: [Venue]\n    registrationPaymentRequiredDate: String\n    organizerUserId: User\n    groups: [Group]\n  }\n\n  type Group {\n    _id: ID\n    registrations: [Registration]\n    eventId: Event\n    name: String\n    projectName: String\n    projectDescription: String\n  }\n\n  type Venue {\n    _id: ID\n    schemaVersion: String\n    schemaDate: String    \n    name: String\n    addressStreet: String\n    addressExtended: String\n    addressCity: String\n    addressState: String\n    addressPostalCode: String\n    addressCountry: String\n    phoneNumber: String\n    website: String\n    events: [Event]\n  }\n\n  type Auth {\n    token: ID\n    user: User\n  }\n\n  type Query {\n    users: [User]\n    registrations: [Registration]\n    events: [Event]\n    groups: [Group]\n    venues: [Venue]\n  }\n\n  type Mutation {\n    login(emailAddress: String!, password: String!): Auth\n    addRegistration(\n      eventId: String!\n      userId: String!\n      type: String\n    ): Registration\n    addUser(\n      emailAddress: String!, nameLast: String!, nameFirst: String!\n    ): User\n    myEvents(organizerUserId: String!): [Event]\n  }\n"], ["\n  type User {\n    _id: ID\n    schemaVersion: String\n    schemaDate: String\n    emailAddress: String\n    password: String\n    nameLast: String\n    nameFirst: String\n    nameMiddle: String\n    addressStreet: String\n    addressExtended: String\n    addressCity: String\n    addressState: String\n    addressPostalCode: String\n    addressCountry: String\n    phoneNumber: String\n    phoneType: String\n    registrations: [Registration]\n  }\n\n  type Address {\n    _id: ID\n    streetAddress: String\n    extendedAddress: String\n    country: String\n    state: String\n    county: String\n    city: String\n    postalCode: String\n    type: String\n    isUserPrimary: Boolean\n  }\n\n  type Phone {\n    _id: ID\n    number: String\n    type: String\n    isUserPrimary: Boolean\n  }\n\n  type Registration {\n    _id: ID\n    userId: User\n    eventId: Event\n    role: String\n    paid: Boolean\n  }\n\n  type Event {\n    _id: ID\n    name: String\n    dateStart: String\n    dateEnd: String\n    registrations: [Registration]\n    dateCutoff: String\n    feeRegistration: Int\n    feeVenue: Int\n    venues: [Venue]\n    registrationPaymentRequiredDate: String\n    organizerUserId: User\n    groups: [Group]\n  }\n\n  type Group {\n    _id: ID\n    registrations: [Registration]\n    eventId: Event\n    name: String\n    projectName: String\n    projectDescription: String\n  }\n\n  type Venue {\n    _id: ID\n    schemaVersion: String\n    schemaDate: String    \n    name: String\n    addressStreet: String\n    addressExtended: String\n    addressCity: String\n    addressState: String\n    addressPostalCode: String\n    addressCountry: String\n    phoneNumber: String\n    website: String\n    events: [Event]\n  }\n\n  type Auth {\n    token: ID\n    user: User\n  }\n\n  type Query {\n    users: [User]\n    registrations: [Registration]\n    events: [Event]\n    groups: [Group]\n    venues: [Venue]\n  }\n\n  type Mutation {\n    login(emailAddress: String!, password: String!): Auth\n    addRegistration(\n      eventId: String!\n      userId: String!\n      type: String\n    ): Registration\n    addUser(\n      emailAddress: String!, nameLast: String!, nameFirst: String!\n    ): User\n    myEvents(organizerUserId: String!): [Event]\n  }\n"])));
exports.typeDefs = typeDefs;
var templateObject_1;
